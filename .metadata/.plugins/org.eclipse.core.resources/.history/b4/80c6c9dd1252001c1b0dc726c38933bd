/*
 * Pixel.c
 *
 *  Created on: -----
 *      Author: -----
 */

#include "Pixel.h"

#define chan *(uint8_t *) 0x41220000
#define ctrl *(uint8_t *) 0x41220008


//Table for pixel dots.
//				 dots[X][Y][COLOR]
volatile uint8_t dots[8][8][3]={0};


// Here the setup operations for the LED matrix will be performed
void setup(){


	//reseting screen at start is a MUST to operation (Set RST-pin to 1).

	chan = 0;
	ctrl = 0;

	usleep(500);

	ctrl |= 0b00001;
	ctrl = 0b00000;
	ctrl |= 0b00001;

	usleep(500);




	//Write code that sets 6-bit values in register of DM163 chip. Recommended that every bit in that register is set to 1. 6-bits and 24 "bytes", so some kind of loop structure could be nice.
	//24*6 bits needs to be transmitted

	// SDA bitti ykköseksi, jotta bittejä voidaan lähettää DM163 piirille

	ctrl |= 0b10000;


	for(uint8_t data_counter=0; data_counter<144; data_counter++) {
		// Kello ylös?
		ctrl |= 0b01000;

		// Kello alas?
		ctrl ^= 0b01000;

		// Toistetaan 144 kertaa, jolloin 6x8 täynnä ykkösiä (???)
	}



	//Final thing in this function is to set SB-bit to 1 to enable transmission to 8-bit register.

	// täh

	// SB bitti ykköseksi, jotta bitit menevät 8-bit rekisteriin

	ctrl |= 0b00100;

	// valmis???

}

//Change value of one pixel at led matrix. This function is only used for changing values of dots array
void SetPixel(uint8_t x,uint8_t y, uint8_t r, uint8_t g, uint8_t b){

	//Hint: you can invert Y-axis quite easily with 7-y
	dots[x][y][0]=b;

	//Write rest of two lines of code required to make this function work properly (green and red colors to array).
	dots[x][y][1]=g;
	dots[x][y][2]=r;


}

/* run(): Function should be called every time that TickHandler() is called (800 times/s). Run() is used to
transmit new values to screen in given X-column (variable x is used to indicate x-column). Pixel values
are taken from dots array.
*/

//Put new data to led matrix. Hint: This function is supposed to send 24-bytes and parameter x is for channel x-coordinate.
void run(uint8_t x){

	//Write code that writes data to led matrix driver (8-bit data). Use values from dots array
	//Hint: use nested loops (loops inside loops)
	//Hint2: loop iterations are 8,3,8 (pixels,color,8-bitdata)

	// First, we loop through the Y-rows ( Y0->Y7)
	// Then, we loop through B->G->R
	// Third, we loop through the single colors' data

	ctrl |= 0b00010;

	// First loop goes through Y-rows ( Y0->Y7)
	for(uint8_t y=0; y<8; y++) {

		// Second loop goes through colors (order is B,G,R)
		for(uint8_t color=0; color<3; color++) {

			//Read dots array's value in this position to some temporary variable. this temporary variable is used in sending data
			uint8_t temporary = dots[x][y][color];

			// Third loop goes through actual color data
			for(uint8_t byte_count=0; byte_count<8; byte_count++) {

				for(uint8_t bit_count=0; bit_count<8; bit_count++) {

					// Kello ylös?
					ctrl |= 0b01000;

					// Kello alas?
					ctrl ^= 0b01000;

			}
		}
	}



}

//Latch signal. See colorsshield.pdf or DM163.pdf in project folder on how latching works
void latch(){
	// Toggle lat bit
	ctrl ^= 0b00010;
	ctrl ^= 0b00010;
}


//Set one line (channel) as active, one at a time.
void open_line(uint8_t x){
	case 0: chan |= 0b00000001
	case 1: chan |= 0b00000010
	case 2: chan |= 0b00000100
	case 3: chan |= 0b00001000
	case 4: chan |= 0b00010000
	case 5: chan |= 0b00100000
	case 6: chan |= 0b01000000
	case 7: chan |= 0b10000000

	default: chan = 0b00000000
		

}



